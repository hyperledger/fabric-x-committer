/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric-x-committer/api/committerpb";

package committerpb;

import "google/protobuf/duration.proto";

import "api/committerpb/ref.proto";
import "api/committerpb/status.proto";

// The notifier service provides API to subscribe to ledger events and receive asynchronous notifications.
service Notifier {
    rpc OpenNotificationStream (stream NotificationRequest) returns (stream NotificationResponse);
}

// NotificationRequest is sent by the clients to subscribe to events.
message NotificationRequest {
    optional TxIDsBatch tx_status_request = 1;

    // The timeout duration that applies to ALL the subscriptions in this request.
    // It is non-strict, i.e., it is possible to receive notifications for this request
    // after the timeout has passed.
    // If this field is not set or has a default value (zero), the default would be applied as
    // per the committer's configuration.
    google.protobuf.Duration timeout = 2;
}

// NotificationResponse contains a batch of event details.
// It is pushed to the client via the stream.
message NotificationResponse {
    repeated TxStatus tx_status_events = 1; // List of transaction status events.
    repeated string timeout_tx_ids = 2;                 // List of timeout events.
}
