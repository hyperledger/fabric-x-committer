//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/committerpb/status.proto

package committerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status represents the result of transaction validation.
// Except for NOT_VALIDATED, all statuses are recorded in the ledger.
// Some statuses are also stored in the state database which prevent resubmission of the same transaction ID.
type Status int32

const (
	// Should never be persisted or reported.
	Status_NOT_VALIDATED Status = 0 // Default. The transaction has not been validated yet.
	// Stored in the state database. Prevents submitting a transaction with the same ID.
	Status_COMMITTED                 Status = 1 // Successfully committed and state updated.
	Status_ABORTED_SIGNATURE_INVALID Status = 2 // Signature is invalid according to the namespace policy.
	Status_ABORTED_MVCC_CONFLICT     Status = 3 // Read-write set conflict.
	// Cannot be stored in the state database because the TX ID cannot be extracted,
	// or the TX ID entry is already occupied.
	Status_REJECTED_DUPLICATE_TX_ID Status = 100 // Transaction with the same ID has already been processed.
	Status_MALFORMED_BAD_ENVELOPE   Status = 101 // Cannot unmarshal envelope.
	Status_MALFORMED_MISSING_TX_ID  Status = 102 // Envelope is missing transaction ID.
	// Stored in the state database. Prevents submitting a transaction with the same ID.
	Status_MALFORMED_UNSUPPORTED_ENVELOPE_PAYLOAD    Status = 103 // Unsupported envelope payload type.
	Status_MALFORMED_BAD_ENVELOPE_PAYLOAD            Status = 104 // Cannot unmarshal envelope's payload.
	Status_MALFORMED_TX_ID_CONFLICT                  Status = 105 // Envelope's TX ID does not match the payload's TX ID.
	Status_MALFORMED_EMPTY_NAMESPACES                Status = 106 // No namespaces provided.
	Status_MALFORMED_DUPLICATE_NAMESPACE             Status = 107 // Duplicate namespace detected.
	Status_MALFORMED_NAMESPACE_ID_INVALID            Status = 108 // Invalid namespace identifier.
	Status_MALFORMED_BLIND_WRITES_NOT_ALLOWED        Status = 109 // Blind writes are not allowed in a namespace transaction.
	Status_MALFORMED_NO_WRITES                       Status = 110 // No write operations in the transaction.
	Status_MALFORMED_EMPTY_KEY                       Status = 111 // Unset key detected.
	Status_MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET Status = 112 // Duplicate key in the read-write set.
	Status_MALFORMED_MISSING_SIGNATURE               Status = 113 // Number of signatures does not match the number of namespaces.
	Status_MALFORMED_NAMESPACE_POLICY_INVALID        Status = 114 // Invalid namespace policy.
	Status_MALFORMED_CONFIG_TX_INVALID               Status = 115 // Invalid configuration transaction.
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:   "NOT_VALIDATED",
		1:   "COMMITTED",
		2:   "ABORTED_SIGNATURE_INVALID",
		3:   "ABORTED_MVCC_CONFLICT",
		100: "REJECTED_DUPLICATE_TX_ID",
		101: "MALFORMED_BAD_ENVELOPE",
		102: "MALFORMED_MISSING_TX_ID",
		103: "MALFORMED_UNSUPPORTED_ENVELOPE_PAYLOAD",
		104: "MALFORMED_BAD_ENVELOPE_PAYLOAD",
		105: "MALFORMED_TX_ID_CONFLICT",
		106: "MALFORMED_EMPTY_NAMESPACES",
		107: "MALFORMED_DUPLICATE_NAMESPACE",
		108: "MALFORMED_NAMESPACE_ID_INVALID",
		109: "MALFORMED_BLIND_WRITES_NOT_ALLOWED",
		110: "MALFORMED_NO_WRITES",
		111: "MALFORMED_EMPTY_KEY",
		112: "MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET",
		113: "MALFORMED_MISSING_SIGNATURE",
		114: "MALFORMED_NAMESPACE_POLICY_INVALID",
		115: "MALFORMED_CONFIG_TX_INVALID",
	}
	Status_value = map[string]int32{
		"NOT_VALIDATED":                             0,
		"COMMITTED":                                 1,
		"ABORTED_SIGNATURE_INVALID":                 2,
		"ABORTED_MVCC_CONFLICT":                     3,
		"REJECTED_DUPLICATE_TX_ID":                  100,
		"MALFORMED_BAD_ENVELOPE":                    101,
		"MALFORMED_MISSING_TX_ID":                   102,
		"MALFORMED_UNSUPPORTED_ENVELOPE_PAYLOAD":    103,
		"MALFORMED_BAD_ENVELOPE_PAYLOAD":            104,
		"MALFORMED_TX_ID_CONFLICT":                  105,
		"MALFORMED_EMPTY_NAMESPACES":                106,
		"MALFORMED_DUPLICATE_NAMESPACE":             107,
		"MALFORMED_NAMESPACE_ID_INVALID":            108,
		"MALFORMED_BLIND_WRITES_NOT_ALLOWED":        109,
		"MALFORMED_NO_WRITES":                       110,
		"MALFORMED_EMPTY_KEY":                       111,
		"MALFORMED_DUPLICATE_KEY_IN_READ_WRITE_SET": 112,
		"MALFORMED_MISSING_SIGNATURE":               113,
		"MALFORMED_NAMESPACE_POLICY_INVALID":        114,
		"MALFORMED_CONFIG_TX_INVALID":               115,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_committerpb_status_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_api_committerpb_status_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_api_committerpb_status_proto_rawDescGZIP(), []int{0}
}

// A batch of TXs' status.
type TxStatusBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*TxStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *TxStatusBatch) Reset() {
	*x = TxStatusBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_committerpb_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStatusBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStatusBatch) ProtoMessage() {}

func (x *TxStatusBatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_committerpb_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStatusBatch.ProtoReflect.Descriptor instead.
func (*TxStatusBatch) Descriptor() ([]byte, []int) {
	return file_api_committerpb_status_proto_rawDescGZIP(), []int{0}
}

func (x *TxStatusBatch) GetStatus() []*TxStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// The status of a TX.
type TxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref    *TxRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=committerpb.Status" json:"status,omitempty"`
}

func (x *TxStatus) Reset() {
	*x = TxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_committerpb_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStatus) ProtoMessage() {}

func (x *TxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_committerpb_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStatus.ProtoReflect.Descriptor instead.
func (*TxStatus) Descriptor() ([]byte, []int) {
	return file_api_committerpb_status_proto_rawDescGZIP(), []int{1}
}

func (x *TxStatus) GetRef() *TxRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TxStatus) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_NOT_VALIDATED
}

var File_api_committerpb_status_proto protoreflect.FileDescriptor

var file_api_committerpb_status_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70,
	0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x1a, 0x19, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0d, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x08, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78,
	0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x83, 0x05, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x56, 0x43,
	0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41,
	0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45,
	0x4c, 0x4f, 0x50, 0x45, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x58, 0x5f, 0x49,
	0x44, 0x10, 0x66, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56,
	0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x67, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44,
	0x5f, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10,
	0x69, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10,
	0x6a, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x6b, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x6c, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x46,
	0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x6d,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x10, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4c,
	0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x6f, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x70, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x71, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41,
	0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x78, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_committerpb_status_proto_rawDescOnce sync.Once
	file_api_committerpb_status_proto_rawDescData = file_api_committerpb_status_proto_rawDesc
)

func file_api_committerpb_status_proto_rawDescGZIP() []byte {
	file_api_committerpb_status_proto_rawDescOnce.Do(func() {
		file_api_committerpb_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_committerpb_status_proto_rawDescData)
	})
	return file_api_committerpb_status_proto_rawDescData
}

var file_api_committerpb_status_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_committerpb_status_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_committerpb_status_proto_goTypes = []interface{}{
	(Status)(0),           // 0: committerpb.Status
	(*TxStatusBatch)(nil), // 1: committerpb.TxStatusBatch
	(*TxStatus)(nil),      // 2: committerpb.TxStatus
	(*TxRef)(nil),         // 3: committerpb.TxRef
}
var file_api_committerpb_status_proto_depIdxs = []int32{
	2, // 0: committerpb.TxStatusBatch.status:type_name -> committerpb.TxStatus
	3, // 1: committerpb.TxStatus.ref:type_name -> committerpb.TxRef
	0, // 2: committerpb.TxStatus.status:type_name -> committerpb.Status
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_api_committerpb_status_proto_init() }
func file_api_committerpb_status_proto_init() {
	if File_api_committerpb_status_proto != nil {
		return
	}
	file_api_committerpb_ref_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_committerpb_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStatusBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_committerpb_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_committerpb_status_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_committerpb_status_proto_goTypes,
		DependencyIndexes: file_api_committerpb_status_proto_depIdxs,
		EnumInfos:         file_api_committerpb_status_proto_enumTypes,
		MessageInfos:      file_api_committerpb_status_proto_msgTypes,
	}.Build()
	File_api_committerpb_status_proto = out.File
	file_api_committerpb_status_proto_rawDesc = nil
	file_api_committerpb_status_proto_goTypes = nil
	file_api_committerpb_status_proto_depIdxs = nil
}
