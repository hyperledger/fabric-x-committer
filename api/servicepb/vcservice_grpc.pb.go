//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: api/servicepb/vcservice.proto

package servicepb

import (
	context "context"
	committerpb "github.com/hyperledger/fabric-x-committer/api/committerpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ValidationAndCommitService_StartValidateAndCommitStream_FullMethodName   = "/servicepb.ValidationAndCommitService/StartValidateAndCommitStream"
	ValidationAndCommitService_SetLastCommittedBlockNumber_FullMethodName    = "/servicepb.ValidationAndCommitService/SetLastCommittedBlockNumber"
	ValidationAndCommitService_GetLastCommittedBlockNumber_FullMethodName    = "/servicepb.ValidationAndCommitService/GetLastCommittedBlockNumber"
	ValidationAndCommitService_GetTransactionsStatus_FullMethodName          = "/servicepb.ValidationAndCommitService/GetTransactionsStatus"
	ValidationAndCommitService_GetNamespacePolicies_FullMethodName           = "/servicepb.ValidationAndCommitService/GetNamespacePolicies"
	ValidationAndCommitService_GetConfigTransaction_FullMethodName           = "/servicepb.ValidationAndCommitService/GetConfigTransaction"
	ValidationAndCommitService_SetupSystemTablesAndNamespaces_FullMethodName = "/servicepb.ValidationAndCommitService/SetupSystemTablesAndNamespaces"
)

// ValidationAndCommitServiceClient is the client API for ValidationAndCommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationAndCommitServiceClient interface {
	StartValidateAndCommitStream(ctx context.Context, opts ...grpc.CallOption) (ValidationAndCommitService_StartValidateAndCommitStreamClient, error)
	SetLastCommittedBlockNumber(ctx context.Context, in *committerpb.BlockRef, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLastCommittedBlockNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LastCommittedBlock, error)
	GetTransactionsStatus(ctx context.Context, in *committerpb.TxIDsBatch, opts ...grpc.CallOption) (*committerpb.TxStatusBatch, error)
	GetNamespacePolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*committerpb.NamespacePolicies, error)
	GetConfigTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*committerpb.ConfigTransaction, error)
	SetupSystemTablesAndNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type validationAndCommitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationAndCommitServiceClient(cc grpc.ClientConnInterface) ValidationAndCommitServiceClient {
	return &validationAndCommitServiceClient{cc}
}

func (c *validationAndCommitServiceClient) StartValidateAndCommitStream(ctx context.Context, opts ...grpc.CallOption) (ValidationAndCommitService_StartValidateAndCommitStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidationAndCommitService_ServiceDesc.Streams[0], ValidationAndCommitService_StartValidateAndCommitStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validationAndCommitServiceStartValidateAndCommitStreamClient{stream}
	return x, nil
}

type ValidationAndCommitService_StartValidateAndCommitStreamClient interface {
	Send(*VcBatch) error
	Recv() (*committerpb.TxStatusBatch, error)
	grpc.ClientStream
}

type validationAndCommitServiceStartValidateAndCommitStreamClient struct {
	grpc.ClientStream
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamClient) Send(m *VcBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamClient) Recv() (*committerpb.TxStatusBatch, error) {
	m := new(committerpb.TxStatusBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validationAndCommitServiceClient) SetLastCommittedBlockNumber(ctx context.Context, in *committerpb.BlockRef, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_SetLastCommittedBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) GetLastCommittedBlockNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LastCommittedBlock, error) {
	out := new(LastCommittedBlock)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_GetLastCommittedBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) GetTransactionsStatus(ctx context.Context, in *committerpb.TxIDsBatch, opts ...grpc.CallOption) (*committerpb.TxStatusBatch, error) {
	out := new(committerpb.TxStatusBatch)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_GetTransactionsStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) GetNamespacePolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*committerpb.NamespacePolicies, error) {
	out := new(committerpb.NamespacePolicies)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_GetNamespacePolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) GetConfigTransaction(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*committerpb.ConfigTransaction, error) {
	out := new(committerpb.ConfigTransaction)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_GetConfigTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) SetupSystemTablesAndNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_SetupSystemTablesAndNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationAndCommitServiceServer is the server API for ValidationAndCommitService service.
// All implementations must embed UnimplementedValidationAndCommitServiceServer
// for forward compatibility
type ValidationAndCommitServiceServer interface {
	StartValidateAndCommitStream(ValidationAndCommitService_StartValidateAndCommitStreamServer) error
	SetLastCommittedBlockNumber(context.Context, *committerpb.BlockRef) (*emptypb.Empty, error)
	GetLastCommittedBlockNumber(context.Context, *emptypb.Empty) (*LastCommittedBlock, error)
	GetTransactionsStatus(context.Context, *committerpb.TxIDsBatch) (*committerpb.TxStatusBatch, error)
	GetNamespacePolicies(context.Context, *emptypb.Empty) (*committerpb.NamespacePolicies, error)
	GetConfigTransaction(context.Context, *emptypb.Empty) (*committerpb.ConfigTransaction, error)
	SetupSystemTablesAndNamespaces(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedValidationAndCommitServiceServer()
}

// UnimplementedValidationAndCommitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidationAndCommitServiceServer struct {
}

func (UnimplementedValidationAndCommitServiceServer) StartValidateAndCommitStream(ValidationAndCommitService_StartValidateAndCommitStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartValidateAndCommitStream not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) SetLastCommittedBlockNumber(context.Context, *committerpb.BlockRef) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLastCommittedBlockNumber not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) GetLastCommittedBlockNumber(context.Context, *emptypb.Empty) (*LastCommittedBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCommittedBlockNumber not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) GetTransactionsStatus(context.Context, *committerpb.TxIDsBatch) (*committerpb.TxStatusBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsStatus not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) GetNamespacePolicies(context.Context, *emptypb.Empty) (*committerpb.NamespacePolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacePolicies not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) GetConfigTransaction(context.Context, *emptypb.Empty) (*committerpb.ConfigTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigTransaction not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) SetupSystemTablesAndNamespaces(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSystemTablesAndNamespaces not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) mustEmbedUnimplementedValidationAndCommitServiceServer() {
}

// UnsafeValidationAndCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationAndCommitServiceServer will
// result in compilation errors.
type UnsafeValidationAndCommitServiceServer interface {
	mustEmbedUnimplementedValidationAndCommitServiceServer()
}

func RegisterValidationAndCommitServiceServer(s grpc.ServiceRegistrar, srv ValidationAndCommitServiceServer) {
	s.RegisterService(&ValidationAndCommitService_ServiceDesc, srv)
}

func _ValidationAndCommitService_StartValidateAndCommitStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidationAndCommitServiceServer).StartValidateAndCommitStream(&validationAndCommitServiceStartValidateAndCommitStreamServer{stream})
}

type ValidationAndCommitService_StartValidateAndCommitStreamServer interface {
	Send(*committerpb.TxStatusBatch) error
	Recv() (*VcBatch, error)
	grpc.ServerStream
}

type validationAndCommitServiceStartValidateAndCommitStreamServer struct {
	grpc.ServerStream
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamServer) Send(m *committerpb.TxStatusBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamServer) Recv() (*VcBatch, error) {
	m := new(VcBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidationAndCommitService_SetLastCommittedBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(committerpb.BlockRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).SetLastCommittedBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_SetLastCommittedBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).SetLastCommittedBlockNumber(ctx, req.(*committerpb.BlockRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_GetLastCommittedBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).GetLastCommittedBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_GetLastCommittedBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).GetLastCommittedBlockNumber(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_GetTransactionsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(committerpb.TxIDsBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).GetTransactionsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_GetTransactionsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).GetTransactionsStatus(ctx, req.(*committerpb.TxIDsBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_GetNamespacePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).GetNamespacePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_GetNamespacePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).GetNamespacePolicies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_GetConfigTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).GetConfigTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_GetConfigTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).GetConfigTransaction(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_SetupSystemTablesAndNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).SetupSystemTablesAndNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_SetupSystemTablesAndNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).SetupSystemTablesAndNamespaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidationAndCommitService_ServiceDesc is the grpc.ServiceDesc for ValidationAndCommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidationAndCommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicepb.ValidationAndCommitService",
	HandlerType: (*ValidationAndCommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLastCommittedBlockNumber",
			Handler:    _ValidationAndCommitService_SetLastCommittedBlockNumber_Handler,
		},
		{
			MethodName: "GetLastCommittedBlockNumber",
			Handler:    _ValidationAndCommitService_GetLastCommittedBlockNumber_Handler,
		},
		{
			MethodName: "GetTransactionsStatus",
			Handler:    _ValidationAndCommitService_GetTransactionsStatus_Handler,
		},
		{
			MethodName: "GetNamespacePolicies",
			Handler:    _ValidationAndCommitService_GetNamespacePolicies_Handler,
		},
		{
			MethodName: "GetConfigTransaction",
			Handler:    _ValidationAndCommitService_GetConfigTransaction_Handler,
		},
		{
			MethodName: "SetupSystemTablesAndNamespaces",
			Handler:    _ValidationAndCommitService_SetupSystemTablesAndNamespaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartValidateAndCommitStream",
			Handler:       _ValidationAndCommitService_StartValidateAndCommitStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/servicepb/vcservice.proto",
}
