//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.29.3
// source: api/servicepb/coordinator.proto

package servicepb

import (
	committerpb "github.com/hyperledger/fabric-x-committer/api/committerpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A committer's representation of a block in the blockchain.
type CoordinatorBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs      []*TxWithRef            `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`           // List of transactions within the block.
	Rejected []*committerpb.TxStatus `protobuf:"bytes,2,rep,name=rejected,proto3" json:"rejected,omitempty"` // Rejected transactions.
}

func (x *CoordinatorBatch) Reset() {
	*x = CoordinatorBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_servicepb_coordinator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatorBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatorBatch) ProtoMessage() {}

func (x *CoordinatorBatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_servicepb_coordinator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatorBatch.ProtoReflect.Descriptor instead.
func (*CoordinatorBatch) Descriptor() ([]byte, []int) {
	return file_api_servicepb_coordinator_proto_rawDescGZIP(), []int{0}
}

func (x *CoordinatorBatch) GetTxs() []*TxWithRef {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *CoordinatorBatch) GetRejected() []*committerpb.TxStatus {
	if x != nil {
		return x.Rejected
	}
	return nil
}

type WaitingTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WaitingTransactions) Reset() {
	*x = WaitingTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_servicepb_coordinator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitingTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitingTransactions) ProtoMessage() {}

func (x *WaitingTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_api_servicepb_coordinator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitingTransactions.ProtoReflect.Descriptor instead.
func (*WaitingTransactions) Descriptor() ([]byte, []int) {
	return file_api_servicepb_coordinator_proto_rawDescGZIP(), []int{1}
}

func (x *WaitingTransactions) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_api_servicepb_coordinator_proto protoreflect.FileDescriptor

var file_api_servicepb_coordinator_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x2f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x10,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x26, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x66, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xfc, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x66, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54,
	0x78, 0x49, 0x44, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x24, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x78, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_servicepb_coordinator_proto_rawDescOnce sync.Once
	file_api_servicepb_coordinator_proto_rawDescData = file_api_servicepb_coordinator_proto_rawDesc
)

func file_api_servicepb_coordinator_proto_rawDescGZIP() []byte {
	file_api_servicepb_coordinator_proto_rawDescOnce.Do(func() {
		file_api_servicepb_coordinator_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_servicepb_coordinator_proto_rawDescData)
	})
	return file_api_servicepb_coordinator_proto_rawDescData
}

var file_api_servicepb_coordinator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_servicepb_coordinator_proto_goTypes = []interface{}{
	(*CoordinatorBatch)(nil),              // 0: servicepb.CoordinatorBatch
	(*WaitingTransactions)(nil),           // 1: servicepb.WaitingTransactions
	(*TxWithRef)(nil),                     // 2: servicepb.TxWithRef
	(*committerpb.TxStatus)(nil),          // 3: committerpb.TxStatus
	(*committerpb.BlockRef)(nil),          // 4: committerpb.BlockRef
	(*emptypb.Empty)(nil),                 // 5: google.protobuf.Empty
	(*committerpb.TxIDsBatch)(nil),        // 6: committerpb.TxIDsBatch
	(*committerpb.TxStatusBatch)(nil),     // 7: committerpb.TxStatusBatch
	(*committerpb.ConfigTransaction)(nil), // 8: committerpb.ConfigTransaction
}
var file_api_servicepb_coordinator_proto_depIdxs = []int32{
	2, // 0: servicepb.CoordinatorBatch.txs:type_name -> servicepb.TxWithRef
	3, // 1: servicepb.CoordinatorBatch.rejected:type_name -> committerpb.TxStatus
	0, // 2: servicepb.Coordinator.BlockProcessing:input_type -> servicepb.CoordinatorBatch
	4, // 3: servicepb.Coordinator.SetLastCommittedBlockNumber:input_type -> committerpb.BlockRef
	5, // 4: servicepb.Coordinator.GetNextExpectedBlockNumber:input_type -> google.protobuf.Empty
	6, // 5: servicepb.Coordinator.GetTransactionsStatus:input_type -> committerpb.TxIDsBatch
	5, // 6: servicepb.Coordinator.GetConfigTransaction:input_type -> google.protobuf.Empty
	5, // 7: servicepb.Coordinator.NumberOfWaitingTransactionsForStatus:input_type -> google.protobuf.Empty
	7, // 8: servicepb.Coordinator.BlockProcessing:output_type -> committerpb.TxStatusBatch
	5, // 9: servicepb.Coordinator.SetLastCommittedBlockNumber:output_type -> google.protobuf.Empty
	4, // 10: servicepb.Coordinator.GetNextExpectedBlockNumber:output_type -> committerpb.BlockRef
	7, // 11: servicepb.Coordinator.GetTransactionsStatus:output_type -> committerpb.TxStatusBatch
	8, // 12: servicepb.Coordinator.GetConfigTransaction:output_type -> committerpb.ConfigTransaction
	1, // 13: servicepb.Coordinator.NumberOfWaitingTransactionsForStatus:output_type -> servicepb.WaitingTransactions
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_servicepb_coordinator_proto_init() }
func file_api_servicepb_coordinator_proto_init() {
	if File_api_servicepb_coordinator_proto != nil {
		return
	}
	file_api_servicepb_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_servicepb_coordinator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatorBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_servicepb_coordinator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitingTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_servicepb_coordinator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_servicepb_coordinator_proto_goTypes,
		DependencyIndexes: file_api_servicepb_coordinator_proto_depIdxs,
		MessageInfos:      file_api_servicepb_coordinator_proto_msgTypes,
	}.Build()
	File_api_servicepb_coordinator_proto = out.File
	file_api_servicepb_coordinator_proto_rawDesc = nil
	file_api_servicepb_coordinator_proto_goTypes = nil
	file_api_servicepb_coordinator_proto_depIdxs = nil
}
