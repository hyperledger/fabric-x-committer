//
//Copyright IBM Corp. All Rights Reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: api/protoloadgen/loadgen.proto

package protoloadgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoadGenService_AppendBatch_FullMethodName = "/protoloadgen.LoadGenService/AppendBatch"
	LoadGenService_GetLimit_FullMethodName    = "/protoloadgen.LoadGenService/GetLimit"
	LoadGenService_SetLimit_FullMethodName    = "/protoloadgen.LoadGenService/SetLimit"
)

// LoadGenServiceClient is the client API for LoadGenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadGenServiceClient interface {
	AppendBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLimit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Limit, error)
	SetLimit(ctx context.Context, in *Limit, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type loadGenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadGenServiceClient(cc grpc.ClientConnInterface) LoadGenServiceClient {
	return &loadGenServiceClient{cc}
}

func (c *loadGenServiceClient) AppendBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LoadGenService_AppendBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadGenServiceClient) GetLimit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Limit, error) {
	out := new(Limit)
	err := c.cc.Invoke(ctx, LoadGenService_GetLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadGenServiceClient) SetLimit(ctx context.Context, in *Limit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LoadGenService_SetLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadGenServiceServer is the server API for LoadGenService service.
// All implementations must embed UnimplementedLoadGenServiceServer
// for forward compatibility
type LoadGenServiceServer interface {
	AppendBatch(context.Context, *Batch) (*emptypb.Empty, error)
	GetLimit(context.Context, *emptypb.Empty) (*Limit, error)
	SetLimit(context.Context, *Limit) (*emptypb.Empty, error)
	mustEmbedUnimplementedLoadGenServiceServer()
}

// UnimplementedLoadGenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoadGenServiceServer struct {
}

func (UnimplementedLoadGenServiceServer) AppendBatch(context.Context, *Batch) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendBatch not implemented")
}
func (UnimplementedLoadGenServiceServer) GetLimit(context.Context, *emptypb.Empty) (*Limit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimit not implemented")
}
func (UnimplementedLoadGenServiceServer) SetLimit(context.Context, *Limit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLimit not implemented")
}
func (UnimplementedLoadGenServiceServer) mustEmbedUnimplementedLoadGenServiceServer() {}

// UnsafeLoadGenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadGenServiceServer will
// result in compilation errors.
type UnsafeLoadGenServiceServer interface {
	mustEmbedUnimplementedLoadGenServiceServer()
}

func RegisterLoadGenServiceServer(s grpc.ServiceRegistrar, srv LoadGenServiceServer) {
	s.RegisterService(&LoadGenService_ServiceDesc, srv)
}

func _LoadGenService_AppendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadGenServiceServer).AppendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadGenService_AppendBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadGenServiceServer).AppendBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadGenService_GetLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadGenServiceServer).GetLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadGenService_GetLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadGenServiceServer).GetLimit(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadGenService_SetLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Limit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadGenServiceServer).SetLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadGenService_SetLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadGenServiceServer).SetLimit(ctx, req.(*Limit))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadGenService_ServiceDesc is the grpc.ServiceDesc for LoadGenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadGenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoloadgen.LoadGenService",
	HandlerType: (*LoadGenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendBatch",
			Handler:    _LoadGenService_AppendBatch_Handler,
		},
		{
			MethodName: "GetLimit",
			Handler:    _LoadGenService_GetLimit_Handler,
		},
		{
			MethodName: "SetLimit",
			Handler:    _LoadGenService_SetLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protoloadgen/loadgen.proto",
}
