/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric-x-committer/api/protocoordinatorservice";

package protocoordinatorservice;

import "api/protoblocktx/block_tx.proto";
import "google/protobuf/empty.proto";

service Coordinator {
    rpc BlockProcessing(stream Batch) returns (stream protoblocktx.TransactionsStatus);
    rpc SetLastCommittedBlockNumber (protoblocktx.BlockInfo) returns (google.protobuf.Empty) {};
    rpc GetLastCommittedBlockNumber (google.protobuf.Empty) returns (protoblocktx.LastCommittedBlock) {};
    rpc GetNextExpectedBlockNumber (google.protobuf.Empty) returns (protoblocktx.BlockInfo) {};
    rpc GetTransactionsStatus(protoblocktx.QueryStatus) returns (protoblocktx.TransactionsStatus);
    rpc GetConfigTransaction(google.protobuf.Empty) returns (protoblocktx.ConfigTransaction) {};
    rpc NumberOfWaitingTransactionsForStatus(google.protobuf.Empty) returns (WaitingTransactions);
}

// A committer's representation of a block in the blockchain.
message Batch {
    repeated Tx txs = 1;                // List of transactions within the block.
    repeated TxStatusInfo rejected = 2; // Rejected transactions.
}

// A committer's representation of a TX in the blockchain.
message Tx {
    TxRef ref = 1;                // The TX reference.
    protoblocktx.Tx content = 2;  // The TX content.
}

message TxStatusInfo {
    TxRef ref = 1;                   // The TX reference.
    protoblocktx.Status status = 2;  // The reject reason.
}

// The TX reference with respect to the block generated by the orderer.
message TxRef {
    uint64 block_num = 1; // The block number.
    uint32 tx_num = 2;    // Transaction number within the block
    string tx_id = 3;     // Transaction ID within the block.
}

message WaitingTransactions {
    int32 count = 1;
}
