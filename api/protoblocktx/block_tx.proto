/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric-x-committer/api/protoblocktx";

package protoblocktx;

// Represents a transaction in the blockchain.
message Tx {
    string id = 1; // The transaction ID.
    repeated TxNamespace namespaces = 2; // Namespaces associated with the transaction.
    repeated bytes signatures = 3; // signature per namespace.
}

// Represents a namespace within a transaction.
message TxNamespace {
    string ns_id = 1; // The namespace ID.
    uint64 ns_version = 2; // The version of the namespace.
    repeated Read reads_only = 3; // List of read only operations within the namespace.
    repeated ReadWrite read_writes = 4; // List of read-write operations within the namespace.
    repeated Write blind_writes = 5; // List of blind write operations within the namespace.
}

// Represents a read operation.
message Read {
    bytes key = 1; // The key being read.
    optional uint64 version = 2; // The version of the key being read. Nil version means it doesn't exist.
}

// Represents a read-write operation.
message ReadWrite {
    bytes key = 1; // The key involved in the read-write operation.
    optional uint64 version = 2; // The version of the key being read and written. Nil version means it doesn't exist.
    bytes value = 3; // The value associated with the key being written.
}

// Represents a write operation.
message Write {
    bytes key = 1; // The key being written.
    bytes value = 2; // The value associated with the key being written.
}

// Represents a namespace policy.
message NamespacePolicy {
    string scheme = 1; // The scheme for signature verification.
    bytes public_key = 2; // The public key for signature verification.
}

message BlockInfo {
    uint64 number = 1;
}

message LastCommittedBlock {
    optional BlockInfo block = 1;
}

message QueryStatus {
    repeated string txIDs = 1;
}

message TransactionsStatus {
    map<string, StatusWithHeight> status = 1;
}

message StatusWithHeight {
    Status code = 1;
    uint64 block_number = 2;
    uint32 tx_number = 3;
}

message NamespacePolicies {
    repeated PolicyItem policies = 1;
}

message PolicyItem {
    string namespace = 1;
    bytes policy = 2;
    uint64 version = 3;
}

message ConfigTransaction {
    bytes envelope = 1;
    uint64 version = 2;
}

enum Status {
    COMMITTED = 0;
    ABORTED_MVCC_CONFLICT = 1;
    ABORTED_DUPLICATE_TXID = 2;
    ABORTED_SIGNATURE_INVALID = 3;
    ABORTED_MISSING_TXID = 4;
    ABORTED_DUPLICATE_NAMESPACE = 5;
    ABORTED_NAMESPACE_POLICY_INVALID = 6;
    ABORTED_NAMESPACE_ID_INVALID = 7;
	  ABORTED_BLIND_WRITES_NOT_ALLOWED = 9;
    ABORTED_NO_WRITES = 10;
    ABORTED_UNSUPPORTED_TX_PAYLOAD = 11;
    ABORTED_NIL_KEY = 12;
    ABORTED_DUPLICATE_KEY_IN_READ_WRITE_SET = 13;
    ABORTED_EMPTY_NAMESPACES = 14;
    NOT_VALIDATED = 255;
}
